{"version":3,"sources":["RealtimeCameraView.js","App.js","serviceWorker.js","index.js"],"names":["RealtimeCameraView","props","video","useMemo","document","createElement","canvas","useRef","shadowElement","setHeight","vw","vh","current","h","width","height","useEffect","undefined","navigator","mediaDevices","getUserMedia","audio","then","mediaStream","srcObject","onloadedmetadata","play","videoWidth","videoHeight","catch","err","console","error","alert","askPermission","runing","Math","min","body","clientWidth","draw","shadowCtx","getContext","ctx","w","drawImage","imageData","getImageData","size","i","middle","data","putImageData","requestAnimationFrame","className","ref","App","Boolean","window","location","hostname","match","ReactDOM","render","getElementById","serviceWorker","ready","registration","unregister"],"mappings":"iQAoCO,SAASA,EAAmBC,GACjC,IAAMC,EAAQC,mBAAQ,kBAAIC,SAASC,cAAc,WAAU,IACrDC,EAASC,mBACTC,EAAgBD,mBACtB,SAASE,EAAUC,EAAIC,GACrB,GAAKL,EAAOM,QAAZ,CAIA,IACMC,EAAKF,EAAKD,EADNJ,EAAOM,QAAQE,MAEzBR,EAAOM,QAAQG,OAASF,EACxBL,EAAcI,QAAQG,OAASF,GAGjCG,qBAAU,YAzCU,SAASd,EAAOO,QAGLQ,IAA3BC,UAAUC,eACZD,UAAUC,aAAe,IAGvBD,UAAUC,aACZD,UAAUC,aACPC,aARe,CAAEC,OAAO,EAAOnB,OAAO,IAStCoB,MAAK,SAASC,GACbrB,EAAMsB,UAAYD,EAClBrB,EAAMuB,iBAAmB,WACvBvB,EAAMwB,OACNjB,EAAUP,EAAMyB,WAAYzB,EAAM0B,iBAGrCC,OAAM,SAASC,GACdC,QAAQC,MAAMF,GACdG,MAAM,mBAAoBf,cAG9Be,MAAM,mBAAoBf,WAoB1BgB,CAAchC,EAAOO,KACpB,CAACP,IACJ,IAAIiC,GAAS,EAqCb,IAAMrB,EAAQsB,KAAKC,IAAI,IAAKjC,SAASkC,KAAKC,YAAc,IAExD,OADAvB,qBArCA,SAASwB,IACP,GAAKlC,EAAOM,SAAYV,EAAxB,CAIA,IAAMuC,EAAYjC,EAAcI,QAAQ8B,WAAW,MAC7CC,EAAMrC,EAAOM,QAAQ8B,WAAW,MAChCE,EAAItC,EAAOM,QAAQE,MACnBD,EAAIP,EAAOM,QAAQG,OAEzB0B,EAAUI,UACR3C,EACA,EACA,EACA0C,EACA/B,GAIF,IAFA,IAAMiC,EAAYL,EAAUM,aAAa,EAAG,EAAGH,EAAG/B,GAC5CmC,EAAOJ,EAAI/B,EACRoC,EAAI,EAAOA,EAAW,EAAPD,EAAUC,GAAK,EAAO,CAC5C,IAAMC,EACiB,GAApBJ,EAAUK,KAAKF,GAAmC,GAAxBH,EAAUK,KAAKF,EAAI,GAAY,EAC5DH,EAAUK,KAAKF,GAAKC,EACpBJ,EAAUK,KAAKF,EAAI,GAAKC,EAQ1B,OALAP,EAAIS,aAAaN,EAAW,EAAG,GAC3BX,GACFkB,sBAAsBb,GAGjB,WACLL,GAAS,MAKG,IAEd,oCACE,yBAAKmB,UAAU,YACb,yBAAKA,UAAU,OACb,yBAAKA,UAAU,OACb,oCACA,4BAAQxC,MAAOA,EAAOC,OAAQ,IAAKwC,IAAK/C,KAE1C,yBAAK8C,UAAU,OACb,2CACA,4BAAQxC,MAAOA,EAAOC,OAAQ,IAAKwC,IAAKjD,Q,MC3FrCkD,MARf,WACE,OACE,yBAAKF,UAAU,OACb,kBAACtD,EAAD,QCKcyD,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAAS3D,SAAS4D,eAAe,SD6H3C,kBAAmB9C,WACrBA,UAAU+C,cAAcC,MAAM5C,MAAK,SAAA6C,GACjCA,EAAaC,kB","file":"static/js/main.6719b852.chunk.js","sourcesContent":["import React, {\n  useCallback,\n  useMemo,\n  useRef,\n  useEffect,\n  useState\n} from \"react\";\n\nimport \"./Realtime.css\";\n\nconst askPermission = function(video, setHeight) {\n  const constraints = { audio: false, video: true };\n\n  if (navigator.mediaDevices === undefined) {\n    navigator.mediaDevices = {};\n  }\n  // Check if the browser allows using camera:\n  if (navigator.mediaDevices) {\n    navigator.mediaDevices\n      .getUserMedia(constraints)\n      .then(function(mediaStream) {\n        video.srcObject = mediaStream;\n        video.onloadedmetadata = function() {\n          video.play();\n          setHeight(video.videoWidth, video.videoHeight);\n        };\n      })\n      .catch(function(err) {\n        console.error(err);\n        alert(\"No media devices\", navigator);\n      });\n  } else {\n    alert(\"No media devices\", navigator);\n  }\n};\n\nexport function RealtimeCameraView(props) {\n  const video = useMemo(()=>document.createElement('video'), []);\n  const canvas = useRef();\n  const shadowElement = useRef();\n  function setHeight(vw, vh) {\n    if (!canvas.current) {\n      return;\n    }\n\n    const w = canvas.current.width;\n    const h = (vh / vw) * w;\n    canvas.current.height = h;\n    shadowElement.current.height = h;\n  }\n\n  useEffect(() => {\n    askPermission(video, setHeight);\n  }, [video]);\n  let runing = true;\n  function draw() {\n    if (!canvas.current || !video) {\n      return;\n    }\n\n    const shadowCtx = shadowElement.current.getContext(\"2d\");\n    const ctx = canvas.current.getContext(\"2d\");\n    const w = canvas.current.width;\n    const h = canvas.current.height;\n    //   Print video on canvas to make it saveable\n    shadowCtx.drawImage(\n      video,\n      0,\n      0,\n      w,\n      h\n    );\n    const imageData = shadowCtx.getImageData(0, 0, w, h);\n    const size = w * h;\n    for (let i = 0 | 0; i < size * 4; i += 4 | 0) {\n      const middle =\n        (imageData.data[i] * 0.5 + imageData.data[i + 1] * 0.5) | 0;\n      imageData.data[i] = middle;\n      imageData.data[i + 1] = middle;\n    }\n\n    ctx.putImageData(imageData, 0, 0);\n    if (runing) {\n      requestAnimationFrame(draw);\n    }\n\n    return () => {\n      runing = false;\n    };\n  }\n\n  const width = Math.min(600, document.body.clientWidth - 50);\n  useEffect(draw, []);\n  return (\n    <>\n      <div className=\"realtime\">\n        <div className=\"row\">\n          <div className=\"col\">\n            <h3>Real</h3>\n            <canvas width={width} height={400} ref={shadowElement} />\n          </div>\n          <div className=\"col\">\n            <h3>Color Blind</h3>\n            <canvas width={width} height={400} ref={canvas} />\n          </div>\n        </div>\n      </div>\n    </>\n  );\n}\n","import React from 'react';\nimport {RealtimeCameraView} from './RealtimeCameraView';\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <RealtimeCameraView/>\n    </div>\n  );\n}\n\nexport default App;\n  ","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}